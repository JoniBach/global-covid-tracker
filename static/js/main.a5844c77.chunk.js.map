{"version":3,"sources":["components/Croamer/Croamer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Croamer","console","log","getCode","useState","selectedLocation","setSelectedLocation","loading","setLoading","React","casesRange","setCasesRange","locationData","setLocationData","Date","selectedDate","startDate","unixStartDate","getTime","unixCurrentDate","value","setValue","caseData","setCaseData","deathData","setDeathData","selectedStartDate","selectedEndDate","length","url","data","setData","a","fetch","response","json","xy","records","map","e","x","month","day","year","y","cases","location","countriesAndTerritories","locations","casesToXY","deathsToXY","deaths","useEffect","fetchUrl","useFetch","covidData","uniq","Set","JSON","stringify","uniqueLocations","Array","from","parse","newCountry","setNewCountry","AppBar","position","Toolbar","Typography","variant","LinearProgress","align","color","Box","p","Grid","container","spacing","item","xs","Paper","href","width","fontStyle","display","pb","pt","pl","style","Slider","onChange","event","newValue","valueLabelDisplay","max","orientation","height","yDomain","xDomain","margin","bottom","left","strokeWidth","stroke","attr","attrAxis","tickFormat","d","toLocaleDateString","tickTotal","tickLabelAngle","text","includeMargin","xPercent","yPercent","filter","top","strokeDasharray","pr","aria-labelledby","min","Autocomplete","id","options","getOptionLabel","option","fullWidth","renderInput","params","TextField","label","Button","onClick","preventDefault","paper","borderBottom","items","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5844c77.chunk.js","sourcesContent":["/* eslint-disable react/jsx-indent-props */\n/* eslint-disable react/jsx-indent */\nimport React, { useState, useEffect } from 'react';\nimport { Slider, Paper, LinearProgress, Typography, Box, Grid, Button, AppBar, Toolbar } from '@material-ui/core';\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalGridLines,\n    HorizontalGridLines,\n    ChartLabel,\n    LineSeries,\n    DiscreteColorLegend,\n} from 'react-vis';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { getCode } from 'country-list';\n// import NavBar from '../NavBar/NavBar';\n// import { useFetch } from './hooks';\n\nexport default function Croamer() {\n    console.log(getCode('United States of America')); // IS\n    const [selectedLocation, setSelectedLocation] = useState();\n    const [loading, setLoading] = useState(true);\n    const [casesRange, setCasesRange] = React.useState(60000);\n    const handleChangeCasesRange = (event, newValue) => {\n        setCasesRange(newValue);\n    };\n    const [locationData, setLocationData] = useState([]);\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\n    const [startDate, setStartDate] = React.useState(new Date('01/01/2020'));\n    const unixStartDate = startDate.getTime();\n    const unixCurrentDate = selectedDate.getTime();\n    const [value, setValue] = React.useState([unixStartDate, unixCurrentDate]);\n    const [caseData, setCaseData] = useState([]);\n    const [deathData, setDeathData] = useState([]);\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    const selectedStartDate = value[0];\n    const selectedEndDate = value[value.length - 1];\n    const useFetch = (url) => {\n        const [data, setData] = useState([]);\n        async function fetchUrl() {\n            const response = await fetch(url);\n            const json = await response.json();\n            const xy = json.records.map(e => (\n                { x: new Date(`${e.month}/${e.day}/${e.year}`), y: e.cases, location: e.countriesAndTerritories }));\n            const locations = json.records.map(e => ({ location: e.countriesAndTerritories }));\n            const casesToXY = json.records.map(e => ({ x: new Date(`${e.month}/${e.day}/${e.year}`), y: e.cases, location: e.countriesAndTerritories }));\n            const deathsToXY = json.records.map(e => ({ x: new Date(`${e.month}/${e.day}/${e.year}`), y: e.deaths, location: e.countriesAndTerritories }));\n            setCaseData(casesToXY);\n            setDeathData(deathsToXY);\n            setLocationData(locations);\n            setData(xy);\n            setLoading(false);\n        }\n        useEffect(() => {\n            fetchUrl();\n        }, []);\n        return [data, loading];\n    };\n    const [covidData] = useFetch(\n        \"https://cors-anywhere.herokuapp.com/https://opendata.ecdc.europa.eu/covid19/casedistribution/json\"\n    )\n    const uniq = new Set(locationData.map(e => JSON.stringify(e)));\n    const uniqueLocations = Array.from(uniq).map(e => JSON.parse(e));\n    const [newCountry, setNewCountry] = useState([]);\n    const addCountryToGraph = (event) => {\n        event.preventDefault();\n        setNewCountry([\n            ...newCountry,\n            { selectedLocation }\n        ]);\n    };\n    async function fetchUrl() {\n        const response = await fetch('https://www.worldpop.org/rest/data/pop/wpgp?iso3=AUS');\n        const json = await response.json();\n        const casesToXY = json.records.map(e => ({ x: new Date(`${e.month}/${e.day}/${e.year}`), y: e.cases, location: e.countriesAndTerritories }));\n        const deathsToXY = json.records.map(e => ({ x: new Date(`${e.month}/${e.day}/${e.year}`), y: e.deaths, location: e.countriesAndTerritories }));\n        setCaseData(casesToXY);\n        setDeathData(deathsToXY);\n\n    }\n    useEffect(() => {\n        fetchUrl();\n    }, []);\n\n    return (\n        <div>\n            <AppBar position=\"static\">\n  <Toolbar>\n    <Typography variant=\"h6\" >\n      Covid Tracker - Global\n    </Typography>\n  </Toolbar>\n</AppBar>\n            {\n                loading || !covidData\n                    ? (\n                        <div>\n                            <LinearProgress />\n                            <Typography variant=\"h5\" align=\"center\" color=\"primary\">\n                                loading new records\n                            </Typography>\n                        </div>\n                    )\n                    : (\n                        <div>\n                            <Box p={5}>\n                                <Grid container\n                                    spacing={1}\n                                >\n                                    <Grid item xs={12}>\n                                        <Paper>\n                                            <Box p={2} >\n                                                My Covid Traker runs on live data sourced by the\n                                                <a href=\"opendata.ecdc.europa.eu/covid19\"> ECDC </a>\n                                                and is expecting new features soon!\n                                            </Box>\n                                        </Paper>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <Paper>\n                                            {\n                                                newCountry.length === 0 ?\n                                                    (\n                                                        <Box\n                                                            width=\"100%\"\n                                                            p={2}\n                                                            fontStyle=\"oblique\"\n                                                            align=\"center\"\n                                                        >\n                                                            {/* Please  */}\n                                                            <Typography color=\"primary\"> Select Region </Typography>\n                                                        and press\n                                                            <Typography color=\"primary\"> \"ADD\" </Typography>\n                                                        to view data...\n                                                            <br />\n                                                            <ArrowDownwardIcon color=\"primary\" />\n                                                        </Box>\n                                                    )\n                                                    : (\n                                                        <>\n                                                            <Box display=\"flex\">\n                                                                <Box pb={10} pt={5} pl={2} style={{ position: 'relative' }}>\n                                                                    <Slider\n                                                                        value={casesRange}\n                                                                        onChange={handleChangeCasesRange}\n                                                                        valueLabelDisplay=\"auto\"\n                                                                        max={60000}\n                                                                        orientation=\"vertical\"\n                                                                    />\n                                                                </Box>\n                                                                <div style={{ width: '100%', position: 'relative' }}>\n                                                                    <div style={{ width: '100%' }}>\n                                                                        <FlexibleWidthXYPlot\n                                                                            height={500}\n                                                                            yDomain={[0, casesRange]}\n                                                                            xDomain={[selectedStartDate, selectedEndDate]}\n                                                                            margin={{ bottom: 80, left: 55 }}\n                                                                        >\n                                                                            <VerticalGridLines />\n                                                                            <HorizontalGridLines style={{ strokeWidth: '0.5', stroke: 'gray' }} />\n                                                                            <YAxis />\n                                                                            <XAxis\n                                                                                attr=\"x\"\n                                                                                attrAxis=\"y\"\n                                                                                orientation=\"bottom\"\n                                                                                tickFormat={function tickFormat(d) { return new Date(d).toLocaleDateString() }}\n                                                                                tickTotal={8}\n                                                                                tickLabelAngle={-45}\n                                                                            />\n                                                                            <ChartLabel\n                                                                                text=\"Days\"\n                                                                                includeMargin={false}\n                                                                                xPercent={0.01}\n                                                                                yPercent={1.07}\n                                                                            />\n                                                                            <ChartLabel\n                                                                                text=\"Cases\"\n                                                                                includeMargin={false}\n                                                                                xPercent={-0.03}\n                                                                                yPercent={0.06}\n                                                                            />\n                                                                            {\n                                                                                newCountry.map(e => (\n                                                                                    <LineSeries data={caseData.filter(d => d.location === e.selectedLocation.location)} />\n                                                                                ))\n                                                                            }\n                                                                        </FlexibleWidthXYPlot>\n                                                                    </div>\n\n\n\n                                                                    <div style={{ position: 'absolute', top: 0, width: '100%' }}>\n\n\n                                                                        <FlexibleWidthXYPlot\n                                                                            height={500}\n                                                                            yDomain={[0, casesRange]}\n                                                                            xDomain={[selectedStartDate, selectedEndDate]}\n                                                                            margin={{ bottom: 80, left: 55 }}\n\n                                                                        >\n\n                                                                            {\n                                                                                newCountry.map(e => (\n                                                                                    <LineSeries strokeDasharray={[5, 5]} data={deathData.filter(d => d.location === e.selectedLocation.location)} />\n                                                                                ))\n                                                                            }\n\n                                                                        </FlexibleWidthXYPlot>\n                                                                    </div>\n                                                                </div>\n\n\n\n                                                            </Box>\n\n                                                            <Box pl={11} pr={5} pb={3} display=\"flex\">\n                                                                <Slider\n                                                                    value={value}\n                                                                    onChange={handleChange}\n                                                                    valueLabelDisplay=\"auto\"\n                                                                    aria-labelledby=\"range-slider\"\n                                                                    min={unixStartDate}\n                                                                    max={unixCurrentDate}\n                                                                    valueLabelDisplay=\"off\"\n                                                                />\n                                                            </Box>\n                                                        </>\n                                                    )}\n                                            <Box display=\"flex\" p={2}>\n                                                <Autocomplete\n                                                    id=\"combo-box-demo\"\n                                                    value={selectedLocation}\n                                                    onChange={(event, newValue) => {\n                                                        setSelectedLocation(newValue);\n                                                    }}\n                                                    options={uniqueLocations}\n                                                    getOptionLabel={(option) => option.location}\n                                                    fullWidth={true}\n                                                    renderInput={(params) => <TextField {...params} fullWidth={true} label=\"Select Region\" variant=\"outlined\" />}\n\n                                                />\n                                                <Button\n                                                    variant=\"outlined\"\n                                                    color=\"primary\"\n                                                    onClick={addCountryToGraph}\n                                                >\n                                                    add\n                                                </Button>\n                                            </Box>\n                                        </Paper>\n                                    </Grid>\n                                    <Grid item xs={12} paper>\n                                        <Paper>\n                                            <Box p={2}>\n                                            <Typography variant=\"h6\">Legend:</Typography>\n                                                <Box display=\"flex\" >\n                                                    <Box pr={1} >\n                                                        <Box style={{ borderBottom: '2px solid black'}} />\n                                                        <Typography variant=\"body2\">Cases</Typography>\n\n                                                    </Box>\n                                                    <Box pr={1}>\n                                                    <Box pr={2} style={{ borderBottom: '2px dotted black'}} />\n                                                    <Typography variant=\"body2\">Fatalities</Typography>\n                                                    </Box>\n                                                </Box>\n                                                <DiscreteColorLegend\n                                                    orientation=\"horizontal\"\n                                                    items={newCountry.map(e => ([e.selectedLocation.location]))}\n                                                />\n                                            </Box>\n                                        </Paper>\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                        </div>\n                    )}\n        </div>\n    );\n}\n","import './App.css';\nimport Croamer from './components/Croamer/Croamer'\n\nfunction App() {\n  return <Croamer />\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}